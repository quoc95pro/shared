#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('shared:server');
var http = require('http');
var	geoip = require('geoip-lite');
var Statistic = require('../models/statistic');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io').listen(server);
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}


io.sockets.on('connection', function (socket) {
	let clientCount = io.engine.clientsCount;
	io.sockets.emit("user count", clientCount);
	// console.log('Headers: ' + JSON.stringify(socket.request.headers));
	var ip = '';
	if (socket.handshake.headers["x-real-ip"].substr(0, 7) == "::ffff:") {
		ip = socket.handshake.headers["x-real-ip"].substr(7);
  }
  
  var url = socket.handshake.headers.referer;  
	var geo = geoip.lookup(ip);
	var browser = socket.request.headers["user-agent"];
	var language = socket.request.headers["accept-language"];
	var country = (geo ? geo.country : "Unknown");
  var region = (geo ? geo.region : "Unknown");
  var timezone = (geo ? geo.timezone : "Unknown");
  var city = (geo ? geo.city : "Unknown");
  var ll = {
    long: (geo ? geo.ll[0] : "Unknown"),
    lat: (geo ? geo.ll[1] : "Unknown")
  };

  var statistic = new Statistic({
    ip: ip,
    url: url,
    browser: browser,
    language: language,
    country: country,
    region: region,
    timezone: timezone,
    city: city,
    ll: ll
  })

  statistic.save( (err, st) => {
    if (err) {
      console.log(err);
    } else {
     console.log(st.ip + '-'+st.region + '-' +st.country);
    }
  });


  socket.on('disconnect', function (data) {
		io.sockets.emit("user count", clientCount);
	});

});